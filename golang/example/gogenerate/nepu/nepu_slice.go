// Generated by: main
// TypeWriter: slice
// Directive: +gen on Nepu

package nepu

// NepuSlice is a slice of type Nepu. Use it where you would use []Nepu.
type NepuSlice []Nepu

// Where returns a new NepuSlice whose elements return true for func. See: http://clipperhouse.github.io/gen/#Where
func (rcv NepuSlice) Where(fn func(Nepu) bool) (result NepuSlice) {
	for _, v := range rcv {
		if fn(v) {
			result = append(result, v)
		}
	}
	return result
}

// Count gives the number elements of NepuSlice that return true for the passed func. See: http://clipperhouse.github.io/gen/#Count
func (rcv NepuSlice) Count(fn func(Nepu) bool) (result int) {
	for _, v := range rcv {
		if fn(v) {
			result++
		}
	}
	return
}

// GroupByString groups elements into a map keyed by string. See: http://clipperhouse.github.io/gen/#GroupBy
func (rcv NepuSlice) GroupByString(fn func(Nepu) string) map[string]NepuSlice {
	result := make(map[string]NepuSlice)
	for _, v := range rcv {
		key := fn(v)
		result[key] = append(result[key], v)
	}
	return result
}
